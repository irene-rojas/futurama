{"version":3,"sources":["Components/Image/images/amywong.png","Components/Image/images/bender.png","Components/Image/images/farnsworth.png","Components/Image/images/fry.png","Components/Image/images/kif.png","Components/Image/images/leela.png","Components/Image/images/nibbler.png","Components/Image/images/zoidberg.png","Components/Prizes/images/buggalo.png","Components/Prizes/images/clone.jpg","Components/Prizes/images/jars.png","Components/Prizes/images/ship.jpg","Components/Header/Header.js","Components/Image/Image.js","Components/Prizes/Prizes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","score","mapNamesToImages","Amy Wong","amywong","Bender","bender","Farnsworth","farnsworth","Fry","fry","Kif","kif","Leela","leela","Nibbler","nibbler","Zoidberg","zoidberg","Image","onClick","handleClick","id","src","name","alt","key","Prizes","state","prizes","buggalo","clone","jars","ship","selectedPrize","this","Math","floor","random","length","setState","Component","App","characters","shuffleCharacters","data","i","j","temp","handleImageClick","correctClick","updatedCharacters","_this","map","character","newCharacter","clicked","currentScore","window","location","reload","console","log","_this2","Components_Header_Header","index","Components_Image_Image","image","Components_Prizes_Prizes","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0573dd45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/amywong.75558931.png\";","module.exports = __webpack_public_path__ + \"static/media/bender.efb7e803.png\";","module.exports = __webpack_public_path__ + \"static/media/farnsworth.41e3a237.png\";","module.exports = __webpack_public_path__ + \"static/media/fry.5a5e91ec.png\";","module.exports = __webpack_public_path__ + \"static/media/kif.0e82fdaf.png\";","module.exports = __webpack_public_path__ + \"static/media/leela.ae6bd35e.png\";","module.exports = __webpack_public_path__ + \"static/media/nibbler.de8daaf5.png\";","module.exports = __webpack_public_path__ + \"static/media/zoidberg.4b988e52.png\";","module.exports = __webpack_public_path__ + \"static/media/buggalo.880e6940.png\";","module.exports = __webpack_public_path__ + \"static/media/clone.90ce2c51.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jars.cb0bdd4d.png\";","module.exports = __webpack_public_path__ + \"static/media/ship.a8983c2f.jpg\";","import React from 'react';\nimport \"./Header.css\";\n\nconst Header = (props) => (\n\n        <div className=\"header\">\n\n            <h2 >Good news, everyone!</h2>\n            <p>Try to click on each character only once. \n                <br></br>\n                If you click on it twice, the score resets.\n                <br></br>\n                If the score reaches 8, you win one of four prizes!\n            </p>\n                <br></br>\n            <div className=\"score\">Score: {props.score}</div>\n\n        </div>\n\n);\n\nexport default Header;\n","import React from 'react';\nimport \"./Image.css\";\nimport amywong from \"./images/amywong.png\";\nimport bender from \"./images/bender.png\";\nimport farnsworth from \"./images/farnsworth.png\";\nimport fry from \"./images/fry.png\";\nimport kif from \"./images/kif.png\";\nimport leela from \"./images/leela.png\";\nimport nibbler from \"./images/nibbler.png\";\nimport zoidberg from \"./images/zoidberg.png\";\n\nconst mapNamesToImages = {\n    \"Amy Wong\": amywong,\n    \"Bender\": bender,\n    \"Farnsworth\": farnsworth,\n    \"Fry\": fry,\n    \"Kif\": kif,\n    \"Leela\": leela,\n    \"Nibbler\": nibbler,\n    \"Zoidberg\": zoidberg\n};\n\nconst Image = props => (\n\n    <span onClick={() => props.handleClick(props.id)}>\n        <img className=\"zoom\"\n            src={mapNamesToImages[props.name]}\n            alt={props.name}\n            key={props.id}\n        />\n    </span>\n\n);\n\nexport default Image;\n","import React, { Component } from 'react';\nimport buggalo from \"./images/buggalo.png\";\nimport clone from \"./images/clone.jpg\";\nimport jars from \"./images/jars.png\";\nimport ship from \"./images/ship.jpg\";\nimport \"./Prizes.css\";\n\n\nclass Prizes extends Component {\n\n    state = {\n        prizes: [\n            {\n                id: \"buggalo\",\n                src: buggalo,\n                alt: \"buggalo\",\n                name: \"a buggalo!\"\n            },\n            {\n                id: \"clone\",\n                src: clone,\n                alt: \"clone\",\n                name: \"a clone of your own!\"\n            },\n            {\n                id: \"jars\",\n                src: jars,\n                alt: \"jars\",\n                name: \"a head in a jar!\"\n            },\n            {\n                id: \"ship\",\n                src: ship,\n                alt: \"ship\",\n                name: \"the Planet Express Ship!\"\n            }\n        ],\n        selectedPrize: [\n            {\n                id: \"\",\n                src: \"\",\n                alt: \"\",\n                name: \"\"\n            }\n\n        ]\n    };\n\n    componentDidMount() {\n        let selectedPrize = this.state.prizes[Math.floor(Math.random()*this.state.prizes.length)];\n        this.setState({\n            id: selectedPrize.id,\n            src: selectedPrize.src,\n            alt: selectedPrize.alt,\n            name: selectedPrize.name\n        });\n    }\n\n\n    render() {\n        return (\n\n            <div className=\"winningPrize\">\n                <p className=\"prizesP\">You won {this.state.name}</p>\n                    <img \n                        className=\"prizeImg\"\n                        id={this.state.id}\n                        src={this.state.src}\n                        alt={this.state.alt}\n                    />\n                <br></br>\n                <p className=\"prizesP\">Click any character to play again!</p>\n            </div>\n\n        )\n    }\n\n\n\n}\n\n\nexport default Prizes;","import React, { Component } from 'react';\nimport Header from './Components/Header';\nimport characters from \"./characters.json\";\nimport Image from \"./Components/Image\";\nimport Prizes from \"./Components/Prizes/Prizes.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    characters,\n    score: 0,\n  };\n\n  componentDidMount() {\n    this.setState({ \n        characters: this.shuffleCharacters(this.state.characters)\n    });\n  };\n\n  // shuffles the characters on page reload\n  shuffleCharacters = (data) => {\n    let i = data.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n    }\n    return data;\n  };\n\n  handleImageClick = id => {\n    let correctClick = false;\n      // iterate through characters\n      const updatedCharacters = \n      this.state.characters.map(character => {\n        // console.log(character);\n        const newCharacter = character;\n          if (newCharacter.id === id) {\n            // console.log(newCharacter);\n            // who I clicked on\n            if (!newCharacter.clicked) {\n              newCharacter.clicked = true;\n              correctClick = true;\n            }\n          }\n          return newCharacter;\n      })\n      if (correctClick) {\n        const currentScore = this.state.score;\n        this.setState({\n          score: currentScore + 1, \n          characters: this.shuffleCharacters(updatedCharacters)\n        })\n      }\n      else {\n        if (!correctClick) {\n          this.setState({\n            score: 0,\n            // go through all characters and update click property to false\n            // shuffle updated characters\n            characters: this.shuffleCharacters(updatedCharacters)\n          })\n          window.location.reload();\n        }\n      }\n      console.log(this.state.score);\n        return updatedCharacters\n\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Header className=\"header\" score={this.state.score}/>\n\n        <div className=\"imageGrid\">\n          {this.state.characters.map((character, index) => (\n            <Image\n              id={character.id}\n              key={character.id}\n              name={character.name}\n              image={character.image}\n              handleClick={this.handleImageClick}\n            />\n          ))}\n        </div>\n\n        {this.state.score === 8 &&\n            <div className=\"prizeDiv\">\n                <Prizes className=\"prize\"/>\n            </div>\n        }\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}