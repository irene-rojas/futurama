{"version":3,"sources":["Components/Image/images/amywong.png","Components/Image/images/bender.png","Components/Image/images/farnsworth.png","Components/Image/images/fry.png","Components/Image/images/kif.png","Components/Image/images/leela.png","Components/Image/images/nibbler.png","Components/Image/images/zoidberg.png","Components/Header/Header.js","Components/Image/Image.js","Components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","id","score","Image","onClick","handleClick","src","amywong","alt","name","key","Wrapper","children","App","state","characters","shuffleCharacters","data","i","length","j","Math","floor","random","temp","handleImageClick","correctClick","updatedCharacters","_this","map","character","newCharacter","console","log","clicked","currentScore","setState","window","location","reload","this","_this2","Components_Wrapper_Wrapper","Components_Header_Header","Components_Image_Image","image","Component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d3ad664.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/amywong.75558931.png\";","module.exports = __webpack_public_path__ + \"static/media/bender.efb7e803.png\";","module.exports = __webpack_public_path__ + \"static/media/farnsworth.41e3a237.png\";","module.exports = __webpack_public_path__ + \"static/media/fry.5a5e91ec.png\";","module.exports = __webpack_public_path__ + \"static/media/kif.0e82fdaf.png\";","module.exports = __webpack_public_path__ + \"static/media/leela.ae6bd35e.png\";","module.exports = __webpack_public_path__ + \"static/media/nibbler.de8daaf5.png\";","module.exports = __webpack_public_path__ + \"static/media/zoidberg.4b988e52.png\";","import React from 'react';\nimport \"./Header.css\";\n\nconst Header = props => (\n\n        <div className=\"header\">\n            <div className=\"goodNews\" id=\"goodNews\">\n                <h2 >Good news, everyone!</h2>\n                <p>Try to click on each character only once. \n                    <br></br>\n                    If you click on one twice, the score resets.</p>\n                    <br></br>\n                    <div className=\"score\" id=\"score\">Score: {props.score}</div>\n            </div>\n            {/* <div className=\"name\" id=\"name\">{props.name}</div> */}\n\n        </div>\n\n);\n\nexport default Header;\n","import React from 'react';\nimport \"./Image.css\";\nimport amywong from \"./images/amywong.png\";\nimport bender from \"./images/bender.png\";\nimport farnsworth from \"./images/farnsworth.png\";\nimport fry from \"./images/fry.png\";\nimport kif from \"./images/kif.png\";\nimport leela from \"./images/leela.png\";\nimport nibbler from \"./images/nibbler.png\";\nimport zoidberg from \"./images/zoidberg.png\";\n\nconst Image = props => (\n\n    <span onClick={() => props.handleClick(props.id)}>\n        <img className=\"zoom\"\n            src={amywong}\n            alt={props.name}\n            key={props.id}\n        />\n    </span>\n\n);\n\nexport default Image;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport Header from './Components/Header';\nimport characters from \"./characters.json\";\nimport Image from \"./Components/Image\";\nimport Wrapper from \"./Components/Wrapper\";\n\n\nclass App extends Component {\n\n  // connect this.state.characters to characters.json\n  state = {\n    characters,\n    score: 0\n  };\n\n  // did the component mount?\n  componentDidMount() {\n    this.setState({ characters: this.shuffleCharacters(this.state.characters) });\n  };\n\n  // shuffles the characters on page reload\n  shuffleCharacters = (data) => {\n    let i = data.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n    }\n    return data;\n  };\n\n  handleImageClick = id => {\n    let correctClick = false;\n      // iterate through characters\n      const updatedCharacters = this.state.characters.map(character => {\n        // console.log(character);\n        const newCharacter = character;\n          if (newCharacter.id === id) {\n            console.log(newCharacter);\n            // who I clicked on\n            if (!newCharacter.clicked) {\n              newCharacter.clicked = true;\n              correctClick = true;\n            }\n          }\n          return newCharacter;\n      })\n      if (correctClick) {\n        const currentScore = this.state.score;\n        this.setState({\n          score: currentScore + 1, \n          characters: this.shuffleCharacters(updatedCharacters)\n        })\n      }\n      else {\n        if (!correctClick) {\n          // update setState\n          this.setState({\n            // reset game. set score to 0\n            score: 0,\n            // go through all characters and update click property to false\n            // shuffle updated characters\n            characters: this.shuffleCharacters(updatedCharacters)\n          })\n          window.location.reload();\n        }\n      }\n      console.log(this.state.score);\n      // console.log(correctClick);\n      // console.log(updatedCharacters);\n        // assign current character to temporary variable to update if needed\n        // detect which character was clicked\n        // compare id of current character with id of image clicked\n        // use map since already loops through array and returns result of that function\n        // was this character clicked already?\n        // if character clicked is false, make it true\n        // make correctGuess = true\n        // return updated character object\n\n      // if correctGuess = true, increase score\n      // if false, reset score\n  };\n\n  // render goes last\n  render() {\n    return (\n      <Wrapper>\n\n        <Header score={this.state.score}/>\n\n        <div className=\"imageGrid\">\n          {this.state.characters.map(character => (\n            <Image\n              id={character.id}\n              key={character.id}\n              image={character.image}\n              handleClick={this.handleImageClick}\n            />\n          ))}\n        </div>\n\n\n      </Wrapper>\n      // end wrapper\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}